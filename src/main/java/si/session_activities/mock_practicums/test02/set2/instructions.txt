GCIS-124 SI Mock Pracitcum
Time: 40 Minutes (you have 55 minutes (half the 110 minute period) to do your real practicum)

Welcome! You may do each problem in any order as you please. I would suggest you do the questions
that cover topics you are not familiar with FIRST. Get some practice with the hard stuff first. 

This session is a SAFE SPACE to get things wrong. When learning new concepts, since you are human 
you will definitely get things wrong. You might as well get it wrong at the SI Session instead of 
the real test. So give the frustrating questions a shot and ask your group table or me for help! 

Also I added points for you to grades yourselves!

------- ^ READ THIS TEXT ABOVE QUICKLY FIRST ^ -------

Topics that may be covered:
- Iterator
- Comparator
- BSTs and Heaps
- JavaFX <-- WILL 100% BE COVERED

--------------------------------------------

1. (30 Points) Comparator
A student has a name and a GPA. Create a class representing this with a constructor that passes 
both parameters in, along with getters and setters.

a: A student is greater than another student if their GPA is higher. If they have the same GPA, 
then they are sorted alphabetically. Modify the student class to implement this functionality.

b: Students should also be able to be sorted alphabetically first, then by GPA. Create a helper 
class to implement this functionality.

c: Create a StudentMain class that only has a main method. Add some students with different names
and gpas to a LinkedList. Sort that list regularly and print out each student in a for-each loop.

d: Sort the list again but using the Comparator class. Print out each student once more. 

e: Show me :) (the SI)

--------------------------------------------

2. (30 Points) Iterator
Download the provided files given for this question. You may have to set the package declaration and
imports. Here are the descriptions:
- Stack.java: A Stack interface. Provides basic definitions of Stack methods.
- NodeStack.java: An implementation of a Stack that makes use of Nodes. 
- Node.java: An implementation of Node (if you already have one you don't need this).
- NodeIterator: DO NOT MODIFY. An implementation of a NodeIterator given a root node.

In its current given state, the provided NodeStack class is not iterable. Proviide the implementation needed
to make it iterable:
- Have the Stack.java interface extend Iterable<E> and include a default implementation of the iterator() 
  method that throws an UnsupportedOperationException.
- Implement the iterator() method in NodeStack.java, you will have to use an instance of the NodeIterator.java 
  class for this.

After this, create a NodeStackMain class and push some values to the NodeStack. Use a for-each loop to iterate
through each value in the NodeStack and print them to confirm that you have correctly made the NodeStack iterable.

--------------------------------------------

3. (35 Points) JavaFX / Observer Design Pattern
YOU HAVE BEEN PROVIDED A LABEL AND BUTTON FACTORY METHOD TO USE. You can find it in #si-sessions in the discord.

You will create a basic adder and subtractor that displays a number and has a plus button and a minus 
button that either increments or decrements the displayed number. 

a: Create a basic_calculator folder. (You don't have to make a model and view for this one).

b: Create a CalculatorGUI.java file with the appropriate signature for launching a GUI.
- Inside the GUI create:
    - An HBox with two buttons, a '+' button and a '-' button. 
    - Then, create a VBox with 3 children, one label at the top, one label at the middle and the HBox at the bottom.
   Run the GUI to make sure it's working. 

(Important note: When running the gui you may get an error repeatedly that you don't understand. That is because your 
repo may not be configured correctly. Call me over and I can fix that for you. This is not an error you will encounter 
on the test.)

c: Now that we have the unresponsive GUI, it's time to connect everything. When the user presses the '+' button, it 
increments the displayed number. When the user presses the '-' button, it decrements the displayed number. Provide 
the functionality needed to do that.

(Note: The prompt given above may seem vague, but it is the type of prompt they will give you on the test. If you need 
some hints as to how to do it, follow the prompts below this text):
    - Create an Add.java class. Create a displayLabel field and a constructor that lets you pass this field in.
    - Have Add.java implement the EventHandler<ActionEvent> interface.
    - Implement the inherited handle() method, this is the method that is called when the given button is pressed. Have
      that method increment the displayed number in the Label and display the new number. 
    - In CalculatorGUI.java, have the add button call the .setOnAction class with an instance of the Add class passed in.
    - Do the same for the minus button.

--------------------------------------------

4. (5 Points) BinarySearchTrees and Heaps
Create a TreeMain class that only has a main method. In the main method, create an instance of a 
Binary Search Tree and a Heap (the ones made from the lectures). Add these values to both the BST 
and the Heap:
[10, 13, 21, 18, 11, 8, 9, 12, 30, 1000]

Print the BST and the Heap. Upon printing, they should look like this:
Binary Search Tree: "8 9 10 11 12 13 18 21 30 1000" 
Heap: "[8, 11, 9, 12, 13, 21, 10, 18, 30, 1000, 0], 10"